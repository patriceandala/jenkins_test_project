package main

import (
	"reflect"
	"testing"
)

//func Test_palindromeChecker(t *testing.T) {
//	type args struct {
//		s       string
//		startin []int32
//		endin   []int32
//		subs    []int32
//	}
//	tests := []struct {
//		name string
//		args args
//		want string
//	}{
//		{name: "cdecd", args: args{s: "cdecd", startin: []int32{0, 0, 0, 0}, endin: []int32{0, 1, 2, 3}, subs: []int32{0, 1, 1, 0}}, want: "1110"},
//		{name: "cbac", args: args{s: "cbac", startin: []int32{0, 2, 1}, endin: []int32{3, 3, 3}, subs: []int32{0, 2, 2}}, want: "011"},
//		{name: "bcba", args: args{s: "bcba", startin: []int32{1, 2, 1}, endin: []int32{3, 3, 1}, subs: []int32{2, 0, 0}}, want: "101"},
//		{name: "bcbab", args: args{s: "bcbab", startin: []int32{1, 1, 2}, endin: []int32{4, 3, 3}, subs: []int32{3, 3, 0}}, want: "110"},
//		{name: "xxdnssuqevu", args: args{s: "xxdnssuqevu", startin: []int32{0}, endin: []int32{10}, subs: []int32{3}}, want: "1"},
//		{name: "yczuykvelbobvfnjtfuqxxdnssuqevucxvwxgtetuuurzjaspvkounbpgyfmtboswmrcfvvzprqqbsksnvgkikzqigcdhqvdeoijkdkbxasyveskzyuiitaszdvgvsmchulrzwuwym", args: args{s: "yczuykvelbobvfnjtfuqxxdnssuqevucxvwxgtetuuurzjaspvkounbpgyfmtboswmrcfvvzprqqbsksnvgkikzqigcdhqvdeoijkdkbxasyveskzyuiitaszdvgvsmchulrzwuwym", startin: []int32{2, 64, 7, 33, 20, 3, 32, 4, 15, 6, 69, 5, 39, 16, 6, 54, 45, 30, 1, 39, 124, 29, 20, 45, 1, 25, 26, 110, 89, 75, 53, 21, 22, 18, 44, 39, 47, 2, 46, 4, 7, 22, 37, 83, 94, 87, 34, 79, 76, 3, 60, 82, 47, 5, 40, 40, 21, 112, 42, 32, 2, 131, 46, 67, 54, 48, 42, 74, 21, 54, 21, 32, 118, 16, 76, 75, 95, 71, 20, 51, 54, 88, 79, 72, 51, 53, 69, 22, 16, 29, 55, 11, 1, 68, 61, 23, 49, 119, 76, 111, 41, 3, 25, 125, 74, 48, 8, 18, 5, 9, 95, 87, 107, 26, 28, 81, 15, 72, 4, 52, 30, 36, 109, 38, 40, 1, 6, 32, 102, 15, 27, 2, 42, 47, 21, 51, 36, 4, 69, 105, 13, 18, 56, 35, 24, 56, 23, 93, 32, 24, 4, 39, 92, 35, 9, 4, 2, 28, 93, 55}, endin: []int32{93, 106, 62, 64, 111, 115, 61, 19, 80, 66, 73, 30, 43, 43, 133, 103, 56, 122, 107, 90, 129, 123, 55, 61, 101, 31, 34, 116, 97, 111, 68, 98, 100, 28, 66, 96, 127, 131, 134, 17, 42, 100, 88, 133, 112, 89, 126, 132, 79, 120, 97, 91, 108, 99, 54, 88, 130, 132, 131, 35, 89, 135, 88, 126, 59, 134, 78, 133, 125, 114, 23, 88, 126, 34, 80, 111, 132, 107, 30, 52, 72, 137, 98, 94, 108, 117, 73, 100, 127, 32, 131, 129, 131, 86, 137, 60, 103, 135, 98, 129, 104, 11, 64, 130, 95, 95, 62, 35, 59, 69, 134, 131, 116, 104, 63, 107, 101, 137, 95, 136, 31, 72, 135, 119, 41, 39, 76, 128, 123, 57, 135, 75, 46, 76, 54, 93, 87, 63, 100, 111, 88, 66, 79, 107, 130, 132, 103, 129, 84, 50, 80, 100, 136, 130, 59, 68, 102, 118, 122, 95}, subs: []int32{7, 25, 20, 32, 67, 113, 0, 7, 1, 1, 3, 1, 0, 28, 118, 6, 5, 6, 107, 1, 1, 6, 8, 17, 5, 4, 9, 7, 9, 8, 16, 9, 9, 0, 6, 7, 4, 3, 6, 4, 15, 8, 5, 6, 3, 3, 4, 7, 4, 5, 7, 1, 9, 6, 5, 0, 5, 4, 5, 2, 5, 3, 14, 5, 5, 7, 37, 6, 1, 61, 3, 56, 9, 5, 1, 37, 10, 6, 3, 2, 4, 7, 4, 3, 8, 7, 2, 15, 10, 0, 77, 0, 30, 4, 8, 10, 4, 3, 2, 19, 9, 1, 5, 5, 3, 4, 16, 18, 47, 3, 9, 5, 10, 79, 7, 7, 9, 2, 92, 6, 1, 3, 27, 10, 2, 2, 41, 97, 4, 7, 3, 7, 5, 6, 8, 42, 5, 2, 3, 7, 5, 6, 7, 5, 2, 6, 81, 4, 4, 8, 4, 6, 45, 6, 7, 55, 3, 5, 7, 6}}, want: "1111110100100111111000111111111110110011110101011010101000011110111101111111101111101111101011010101100110111011111110111011101111011111000111110010010010110111"},
//		{name: "shnmmmflbjgqqojutobibeabgtbhsronaebmsgavsilixueskgcmmcnsxqbshpfkviynraijjttiqxaafeorgelfumxeeeqznonerxnatiijhklnocgwiubegbkmfamsrbwiylkrvscdeqsusaqautgburparbuketsfgcwcwbharzulzmlugtxakmccqzowsjb", args: args{s: "shnmmmflbjgqqojutobibeabgtbhsronaebmsgavsilixueskgcmmcnsxqbshpfkviynraijjttiqxaafeorgelfumxeeeqznonerxnatiijhklnocgwiubegbkmfamsrbwiylkrvscdeqsusaqautgburparbuketsfgcwcwbharzulzmlugtxakmccqzowsjb", startin: []int32{130, 25, 57, 60, 120, 58, 48, 101, 37, 174, 41, 94, 81, 64, 112, 91, 74, 120, 90, 8, 66, 2, 153, 66, 7, 85, 108, 122, 44, 12, 39, 7, 34, 186, 107, 151, 0, 68, 9, 83, 104, 163, 135, 102, 15, 33, 96, 20, 22, 77, 84, 69, 37, 87, 35, 42, 64, 77, 96, 98, 74, 142, 50, 56, 115, 10, 113, 144, 23, 37, 2, 33, 20, 133, 21, 76, 90, 10, 109, 142, 68, 9, 62, 19, 83, 69, 108, 13, 135, 78, 123, 134, 45, 163, 33, 34, 110, 93, 39, 126, 62, 33, 13, 123, 16, 56, 29, 7, 69, 14, 26, 18, 44, 20, 113, 84, 20, 145, 43, 54, 35, 116, 47, 131, 53, 70, 49, 39, 68, 43, 10, 101, 26, 16, 1, 40, 49, 79, 107, 99, 72, 118, 4, 87, 9, 34, 151, 26, 167, 159, 35, 19, 3, 141, 188, 20, 101, 142, 73, 103, 47, 17, 101, 18, 94, 41, 2, 11, 58, 60, 34, 113, 79, 30, 99, 76, 142}, endin: []int32{167, 49, 62, 194, 126, 59, 154, 131, 87, 179, 161, 153, 85, 140, 184, 186, 78, 123, 151, 109, 89, 96, 171, 162, 13, 130, 114, 163, 101, 63, 192, 130, 81, 188, 130, 165, 41, 171, 65, 142, 176, 165, 165, 158, 57, 126, 109, 43, 124, 185, 95, 175, 61, 162, 183, 122, 128, 129, 118, 159, 92, 162, 82, 192, 184, 116, 129, 183, 62, 48, 179, 41, 122, 135, 120, 85, 175, 165, 150, 146, 73, 71, 159, 188, 98, 127, 190, 119, 188, 189, 141, 141, 163, 166, 164, 88, 169, 104, 184, 131, 162, 44, 89, 186, 102, 109, 46, 28, 131, 175, 103, 155, 91, 53, 150, 121, 109, 190, 93, 72, 191, 170, 88, 172, 153, 83, 190, 67, 102, 157, 162, 139, 60, 172, 167, 180, 53, 140, 125, 139, 74, 182, 183, 184, 21, 185, 183, 163, 184, 171, 126, 109, 151, 165, 189, 112, 135, 166, 175, 157, 126, 192, 186, 175, 182, 118, 99, 172, 101, 98, 132, 179, 181, 105, 193, 169, 166}, subs: []int32{5, 4, 6, 14, 2, 2, 4, 5, 51, 0, 4, 8, 3, 2, 6, 4, 5, 2, 5, 102, 4, 7, 19, 6, 3, 46, 1, 5, 9, 52, 69, 5, 5, 1, 24, 3, 2, 6, 5, 5, 7, 3, 0, 57, 43, 9, 14, 5, 103, 6, 4, 6, 3, 2, 0, 72, 8, 30, 7, 9, 6, 3, 5, 7, 6, 6, 17, 8, 5, 4, 127, 3, 103, 0, 70, 2, 51, 9, 7, 1, 6, 4, 8, 1, 3, 0, 83, 10, 8, 7, 19, 6, 8, 4, 8, 6, 5, 4, 146, 6, 8, 12, 5, 64, 87, 7, 18, 22, 9, 83, 78, 7, 48, 6, 3, 7, 5, 9, 6, 6, 3, 7, 5, 25, 8, 14, 7, 7, 3, 1, 6, 30, 35, 4, 66, 0, 5, 10, 8, 6, 2, 65, 4, 98, 13, 119, 13, 5, 5, 3, 10, 7, 9, 0, 1, 8, 4, 25, 9, 55, 10, 7, 7, 5, 7, 78, 7, 14, 10, 7, 6, 5, 7, 3, 1, 6, 4}}, want: "101111001001100011010110110011101110001011011111101000011111111100110111101011111010001111111111111111111011111110010111010111110011101011111101111010111011011111111111111010001"},
//		{name: "shnmmmflbjgqqojutobibeabgtbhsronaebmsgavsilixueskgcmmcnsxqbshpfkviynraijjttiqxaafeorgelfumxeeeqznonerxnatiijhklnocgwiubegbkmfamsrbwiylkrvscdeqsusaqautgburparbuketsfgcwcwbharzulzmlugtxakmccqzowsjbshnmmmflbjgqqojutobibeabgtbhsronaebmsgavsilixueskgcmmcnsxqbshpfkviynraijjttiqxaafeorgelfumxeeeqznonerxnatiijhklnocgwiubegbkmfamsrbwiylkrvscdeqsusaqautgburparbuketsfgcwcwbharzulzmlugtxakmccqzowsjb", args: args{s: "shnmmmflbjgqqojutobibeabgtbhsronaebmsgavsilixueskgcmmcnsxqbshpfkviynraijjttiqxaafeorgelfumxeeeqznonerxnatiijhklnocgwiubegbkmfamsrbwiylkrvscdeqsusaqautgburparbuketsfgcwcwbharzulzmlugtxakmccqzowsjbshnmmmflbjgqqojutobibeabgtbhsronaebmsgavsilixueskgcmmcnsxqbshpfkviynraijjttiqxaafeorgelfumxeeeqznonerxnatiijhklnocgwiubegbkmfamsrbwiylkrvscdeqsusaqautgburparbuketsfgcwcwbharzulzmlugtxakmccqzowsjb", startin: []int32{130, 25, 57, 60, 120, 58, 48, 101, 37, 174, 41, 94, 81, 64, 112, 91, 74, 120, 90, 8, 66, 2, 153, 66, 7, 85, 108, 122, 44, 12, 39, 7, 34, 186, 107, 151, 0, 68, 9, 83, 104, 163, 135, 102, 15, 33, 96, 20, 22, 77, 84, 69, 37, 87, 35, 42, 64, 77, 96, 98, 74, 142, 50, 56, 115, 10, 113, 144, 23, 37, 2, 33, 20, 133, 21, 76, 90, 10, 109, 142, 68, 9, 62, 19, 83, 69, 108, 13, 135, 78, 123, 134, 45, 163, 33, 34, 110, 93, 39, 126, 62, 33, 13, 123, 16, 56, 29, 7, 69, 14, 26, 18, 44, 20, 113, 84, 20, 145, 43, 54, 35, 116, 47, 131, 53, 70, 49, 39, 68, 43, 10, 101, 26, 16, 1, 40, 49, 79, 107, 99, 72, 118, 4, 87, 9, 34, 151, 26, 167, 159, 35, 19, 3, 141, 188, 20, 101, 142, 73, 103, 47, 17, 101, 18, 94, 41, 2, 11, 58, 60, 34, 113, 79, 30, 99, 76, 142, 130, 25, 57, 60, 120, 58, 48, 101, 37, 174, 41, 94, 81, 64, 112, 91, 74, 120, 90, 8, 66, 2, 153, 66, 7, 85, 108, 122, 44, 12, 39, 7, 34, 186, 107, 151, 0, 68, 9, 83, 104, 163, 135, 102, 15, 33, 96, 20, 22, 77, 84, 69, 37, 87, 35, 42, 64, 77, 96, 98, 74, 142, 50, 56, 115, 10, 113, 144, 23, 37, 2, 33, 20, 133, 21, 76, 90, 10, 109, 142, 68, 9, 62, 19, 83, 69, 108, 13, 135, 78, 123, 134, 45, 163, 33, 34, 110, 93, 39, 126, 62, 33, 13, 123, 16, 56, 29, 7, 69, 14, 26, 18, 44, 20, 113, 84, 20, 145, 43, 54, 35, 116, 47, 131, 53, 70, 49, 39, 68, 43, 10, 101, 26, 16, 1, 40, 49, 79, 107, 99, 72, 118, 4, 87, 9, 34, 151, 26, 167, 159, 35, 19, 3, 141, 188, 20, 101, 142, 73, 103, 47, 17, 101, 18, 94, 41, 2, 11, 58, 60, 34, 113, 79, 30, 99, 76, 142}, endin: []int32{167, 49, 62, 194, 126, 59, 154, 131, 87, 179, 161, 153, 85, 140, 184, 186, 78, 123, 151, 109, 89, 96, 171, 162, 13, 130, 114, 163, 101, 63, 192, 130, 81, 188, 130, 165, 41, 171, 65, 142, 176, 165, 165, 158, 57, 126, 109, 43, 124, 185, 95, 175, 61, 162, 183, 122, 128, 129, 118, 159, 92, 162, 82, 192, 184, 116, 129, 183, 62, 48, 179, 41, 122, 135, 120, 85, 175, 165, 150, 146, 73, 71, 159, 188, 98, 127, 190, 119, 188, 189, 141, 141, 163, 166, 164, 88, 169, 104, 184, 131, 162, 44, 89, 186, 102, 109, 46, 28, 131, 175, 103, 155, 91, 53, 150, 121, 109, 190, 93, 72, 191, 170, 88, 172, 153, 83, 190, 67, 102, 157, 162, 139, 60, 172, 167, 180, 53, 140, 125, 139, 74, 182, 183, 184, 21, 185, 183, 163, 184, 171, 126, 109, 151, 165, 189, 112, 135, 166, 175, 157, 126, 192, 186, 175, 182, 118, 99, 172, 101, 98, 132, 179, 181, 105, 193, 169, 166, 167, 49, 62, 194, 126, 59, 154, 131, 87, 179, 161, 153, 85, 140, 184, 186, 78, 123, 151, 109, 89, 96, 171, 162, 13, 130, 114, 163, 101, 63, 192, 130, 81, 188, 130, 165, 41, 171, 65, 142, 176, 165, 165, 158, 57, 126, 109, 43, 124, 185, 95, 175, 61, 162, 183, 122, 128, 129, 118, 159, 92, 162, 82, 192, 184, 116, 129, 183, 62, 48, 179, 41, 122, 135, 120, 85, 175, 165, 150, 146, 73, 71, 159, 188, 98, 127, 190, 119, 188, 189, 141, 141, 163, 166, 164, 88, 169, 104, 184, 131, 162, 44, 89, 186, 102, 109, 46, 28, 131, 175, 103, 155, 91, 53, 150, 121, 109, 190, 93, 72, 191, 170, 88, 172, 153, 83, 190, 67, 102, 157, 162, 139, 60, 172, 167, 180, 53, 140, 125, 139, 74, 182, 183, 184, 21, 185, 183, 163, 184, 171, 126, 109, 151, 165, 189, 112, 135, 166, 175, 157, 126, 192, 186, 175, 182, 118, 99, 172, 101, 98, 132, 179, 181, 105, 193, 169, 166}, subs: []int32{5, 4, 6, 14, 2, 2, 4, 5, 51, 0, 4, 8, 3, 2, 6, 4, 5, 2, 5, 102, 4, 7, 19, 6, 3, 46, 1, 5, 9, 52, 69, 5, 5, 1, 24, 3, 2, 6, 5, 5, 7, 3, 0, 57, 43, 9, 14, 5, 103, 6, 4, 6, 3, 2, 0, 72, 8, 30, 7, 9, 6, 3, 5, 7, 6, 6, 17, 8, 5, 4, 127, 3, 103, 0, 70, 2, 51, 9, 7, 1, 6, 4, 8, 1, 3, 0, 83, 10, 8, 7, 19, 6, 8, 4, 8, 6, 5, 4, 146, 6, 8, 12, 5, 64, 87, 7, 18, 22, 9, 83, 78, 7, 48, 6, 3, 7, 5, 9, 6, 6, 3, 7, 5, 25, 8, 14, 7, 7, 3, 1, 6, 30, 35, 4, 66, 0, 5, 10, 8, 6, 2, 65, 4, 98, 13, 119, 13, 5, 5, 3, 10, 7, 9, 0, 1, 8, 4, 25, 9, 55, 10, 7, 7, 5, 7, 78, 7, 14, 10, 7, 6, 5, 7, 3, 1, 6, 4, 5, 4, 6, 14, 2, 2, 4, 5, 51, 0, 4, 8, 3, 2, 6, 4, 5, 2, 5, 102, 4, 7, 19, 6, 3, 46, 1, 5, 9, 52, 69, 5, 5, 1, 24, 3, 2, 6, 5, 5, 7, 3, 0, 57, 43, 9, 14, 5, 103, 6, 4, 6, 3, 2, 0, 72, 8, 30, 7, 9, 6, 3, 5, 7, 6, 6, 17, 8, 5, 4, 127, 3, 103, 0, 70, 2, 51, 9, 7, 1, 6, 4, 8, 1, 3, 0, 83, 10, 8, 7, 19, 6, 8, 4, 8, 6, 5, 4, 146, 6, 8, 12, 5, 64, 87, 7, 18, 22, 9, 83, 78, 7, 48, 6, 3, 7, 5, 9, 6, 6, 3, 7, 5, 25, 8, 14, 7, 7, 3, 1, 6, 30, 35, 4, 66, 0, 5, 10, 8, 6, 2, 65, 4, 98, 13, 119, 13, 5, 5, 3, 10, 7, 9, 0, 1, 8, 4, 25, 9, 55, 10, 7, 7, 5, 7, 78, 7, 14, 10, 7, 6, 5, 7, 3, 1, 6, 4}}, want: "101111001001100011010110110011101110001011011111101000011111111100110111101011111010001111111111111111111011111110010111010111110011101011111101111010111011011111111111111010001101111001001100011010110110011101110001011011111101000011111111100110111101011111010001111111111111111111011111110010111010111110011101011111101111010111011011111111111111010001"},
//	}
//	for _, tt := range tests {
//		t.Run(tt.name, func(t *testing.T) {
//			if got := palindromeChecker(tt.args.s, tt.args.startin, tt.args.endin, tt.args.subs); got != tt.want {
//				t.Errorf("palindromeChecker() = %v, want %v", got, tt.want)
//			}
//		})
//	}
//}

func TestBubbleSort(t *testing.T) {
	type args struct {
		array []int
	}
	tests := []struct {
		name string
		args args
		want []int
	}{
		{"1,3,2,5,4", args{array: []int{1, 3, 2, 5, 4}}, []int{1, 2, 3, 4, 5}},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := BubbleSort(tt.args.array); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("BubbleSort() = %v, want %v", got, tt.want)
			}
		})
	}
}
